/*
 * PanelSourceFoldersVisual.java
 * Created by: JoswillP1
 *
 * COPYRIGHT (c) 2017 by VeriFone Inc., All Rights Reserved.
 *
 *                       N O T I C E
 *
 * Under Federal copyright law, neither the software nor accompanying
 * documentation may be copied, photocopied, reproduced, translated,
 * or reduced to any electronic medium or machine-readable form, in
 * whole or in part, without the prior written consent of VeriFone Inc.,
 * except in the manner described in the documentation.
 */
package com.verifone.netbeans.module1.ui.wizard;

import com.verifone.netbeans.module1.component.ComponentDefinition;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.netbeans.modules.java.api.common.project.ui.wizards.FolderList;
import org.netbeans.spi.project.ui.templates.support.Templates;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;

public final class PanelSourceFoldersVisual extends SettingsPanel implements
		PropertyChangeListener {

	private PanelSourceFolders panel;

	/**
	 * Creates new form NewVFIJ2SEProjectVisualPanel2
	 */
	public PanelSourceFoldersVisual(PanelSourceFolders panel) {
		this.panel = panel;
		initComponents();
		this.sourcePanel.addPropertyChangeListener (this);
		this.testsPanel.addPropertyChangeListener(this);
		this.setName(NbBundle.getMessage(PanelSourceFoldersVisual.class, 
				"LBL.ConfigureSourceRoots"));
		this.putClientProperty("NewProjectWizard_Title", NbBundle.getMessage(
				PanelSourceFoldersVisual.class, "title.ExtCompSourcesProjLocation"));
		((FolderList)this.sourcePanel).setRelatedFolderList((FolderList)this.testsPanel, 
				FolderList.testRootsFilter());
		((FolderList)this.testsPanel).setRelatedFolderList((FolderList)this.sourcePanel);
	}

	@Override
	public String getName() {
		return "Step #2";
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
		sourcePanel = new FolderList("Sources", 'S', "SourcesADesc", "SourcesFCMess",
			'A', "Add Source...", 'R', "Remove source");
		testsPanel = new FolderList("Tests", 'T', "TestsADesc", "TestsFCMess",
			'd', "Add Test...", 'm', "Remove test");
		//(String label, char mnemonic, String accessibleDesc, String fcMessage,
		//char addButtonMnemonic, String addButtonAccessibleDesc, char removeButtonMnemonic,
		//String removeButtonAccessibleDesc)
        jLabel2 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PanelSourceFoldersVisual.class, "PanelSourceFoldersVisual.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PanelSourceFoldersVisual.class, "PanelSourceFoldersVisual.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourcePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(testsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 346, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sourcePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(testsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	void prepareValidation() {
//		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	void store(WizardDescriptor settings) {
		File[] sourceRoots = ((FolderList)this.sourcePanel).getFiles();
		File[] testRoots = ((FolderList)this.testsPanel).getFiles();
		settings.putProperty (ComponentDefinition.SRCROT,sourceRoots);
		settings.putProperty(ComponentDefinition.TSTROT,testRoots);
	}

	@Override
	void read(WizardDescriptor settings) {
		File projectLocation = (File) settings.getProperty(ComponentDefinition.PRJDIR);
		((FolderList)this.sourcePanel).setProjectFolder(projectLocation);
		((FolderList)this.testsPanel).setProjectFolder(projectLocation);
		File[] srcRoot = (File[]) settings.getProperty (ComponentDefinition.SRCROT);
		assert srcRoot != null : "sourceRoot property must be initialized!";	//NOI18N
		File[] testRoot = (File[]) settings.getProperty (ComponentDefinition.TSTROT);
		assert testRoot != null : "testRoot property must be initialized!";	//NOI18N
		ComponentDefinition compDef = (ComponentDefinition)
				settings.getProperty(ComponentDefinition.CMPDIR);
		assert compDef != null : "compDef property must be initialized!" ;	//NOI18N
		if (srcRoot.length == 0){
			if (compDef.hasSrcDir()) {
				srcRoot = new File[]{compDef.getSrcDir()};
			}
		}
		if (testRoot.length == 0) {
			if (compDef.hasUnitDir()) {
				testRoot = new File[]{compDef.getUnitDir()};
			}
		}
		((FolderList)this.sourcePanel).setFiles(srcRoot);
		((FolderList)this.testsPanel).setFiles (testRoot);

		File currentDirectory = null;
		FileObject folder = Templates.getExistingSourcesFolder(settings);
		if (folder != null){
			currentDirectory = FileUtil.toFile(folder);
		}
		if (currentDirectory != null && currentDirectory.isDirectory()) {
			((FolderList)sourcePanel).setLastUsedDir(currentDirectory);
			((FolderList)testsPanel).setLastUsedDir(currentDirectory);
		}
	}

	@Override
	boolean valid(WizardDescriptor settings) {
		File projectLocation = (File) settings.getProperty (ComponentDefinition.PRJDIR);
		File[] sourceRoots = ((FolderList)this.sourcePanel).getFiles();
		File[] testRoots = ((FolderList)this.testsPanel).getFiles();
		if (sourceRoots.length == 0 && testRoots.length == 0) {
			return false;
		}
//		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
		return true;
	}

	@Override
	void validate(WizardDescriptor settings) throws WizardValidationException {
//		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		if (FolderList.PROP_FILES.equals(evt.getPropertyName())) {
			this.panel.fireChangeEvent();
		} else if (FolderList.PROP_LAST_USED_DIR.equals (evt.getPropertyName())) {
			if (evt.getSource() == this.sourcePanel) {
				((FolderList)this.testsPanel).setLastUsedDir((File)evt.getNewValue());
			} else if (evt.getSource() == this.testsPanel) {
				((FolderList)this.sourcePanel).setLastUsedDir((File)evt.getNewValue());
			}
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel sourcePanel;
    private javax.swing.JPanel testsPanel;
    // End of variables declaration//GEN-END:variables
}
